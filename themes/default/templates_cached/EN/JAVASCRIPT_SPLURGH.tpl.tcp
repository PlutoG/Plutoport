<?php
return unserialize("a:6:{i:0;a:1:{i:0;a:5:{i:0;s:26:\"tcpfunc_JAVASCRIPT_SPLURGH\";i:1;a:0:{}i:2;i:1;i:3;s:0:\"\";i:4;s:0:\"\";}}i:1;a:0:{}i:2;s:18:\"JAVASCRIPT_SPLURGH\";i:3;N;i:4;N;i:5;s:4284:\"\$TPL_FUNCS['tcpfunc_JAVASCRIPT_SPLURGH']=\" echo \\\"\\\\\\\"use strict\\\\\\\";\\\\n\\\\n// ==============================\\\\n// DYNAMIC TREE CREATION FUNCTION\\\\n// ==============================\\\\n\\\\n// Creates a tree from a compressed format\\\\n//  This function is recursive in two dimensions. It iterates linearly along lists\\\",\\n	',',\\n	\\\" and it iterates down through depth.\\\\n//  Both kinds of iterates are modelled as recursions to this function call.\\\\nfunction splurgh(save_to\\\",\\n	',',\\n	\\\"key_name\\\",\\n	',',\\n	\\\"url_stub\\\",\\n	',',\\n	\\\"range_a\\\",\\n	',',\\n	\\\"range_b\\\",\\n	',',\\n	\\\"level\\\",\\n	',',\\n	\\\"data\\\",\\n	',',\\n	\\\"chain\\\",\\n	',',\\n	\\\"not_first)\\\\n{\\\\n	if (range_b==-1) range_b=data.length;\\\\n	if ((range_b-range_a)<2) return '';\\\\n\\\\n	var to=data.indexOf('\\\",\\n	',',\\n	\\\"'\\\",\\n	',',\\n	\\\"range_a);\\\\n	if ((to==-1) || (to>range_b)) to=range_b;\\\\n	var next_title=data.substring(range_a\\\",\\n	',',\\n	\\\"to);\\\\n	var anchor_reference;\\\\n	var i;\\\\n	for (i=0;i<next_title.length;i++)\\\\n	{\\\\n		if (next_title.charAt(i+1)=='!')\\\\n		{\\\\n			anchor_reference=next_title.substring(0\\\",\\n	',',\\n	\\\"i+1);\\\\n			next_title=next_title.substring(i+2\\\",\\n	',',\\n	\\\"next_title.length);\\\\n			break;\\\\n		\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n	\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n\\\\n	// Render our item\\\\n	var contents='';\\\\n	contents+='<li>\\\\\\\\n';\\\\n	contents+='<a id=\\\\\\\\\\\\\\\"'+anchor_reference+'\\\\\\\\\\\\\\\" name=\\\\\\\\\\\\\\\"'+anchor_reference+'\\\\\\\\\\\\\\\"></a>\\\\\\\\n';\\\\n	if (url_stub.indexOf('cedi')==-1)\\\\n	{\\\\n		contents+='<a href=\\\\\\\\\\\\\\\"'+escape_html(url_stub)+((url_stub.indexOf('?')==-1)?'?':'&amp;')+'chain='+chain+'&amp;'+key_name+'='+anchor_reference+'\\\\\\\\\\\\\\\">'+escape_html(next_title)+'</a>\\\\\\\\n';\\\\n	\\\",\\n	\\\"}\\\",\\n	\\\" else\\\\n	{\\\\n		contents+='<a href=\\\\\\\\\\\\\\\"'+escape_html(url_stub)+((url_stub.indexOf('?')==-1)?'?':'&amp;')+key_name+'='+chain.replace(/~/g\\\",\\n	',',\\n	\\\"'/').replace(/^\\\\\\\\//\\\",\\n	',',\\n	\\\"'')+'/'+anchor_reference+'\\\\\\\\\\\\\\\">'+escape_html(next_title)+'</a>\\\\\\\\n';\\\\n	\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n\\\\n	if (to+1<data.length)\\\\n	{\\\\n		var a=to+1\\\",\\n	',',\\n	\\\"b=range_b\\\",\\n	',',\\n	\\\"scanner_for\\\",\\n	',',\\n	\\\"to\\\",\\n	',',\\n	\\\"under;\\\\n		if (data.charAt(to+1)=='[') // Child level exists next in list\\\",\\n	',',\\n	\\\" requiring recursion\\\\n		{\\\\n			// Find where this level's data starts and ends\\\\n			var scanner_for_b=to+1;\\\\n			var balance=0;\\\\n			do\\\\n			{\\\\n				if (data.charAt(scanner_for_b)=='[') balance++;\\\\n				if (data.charAt(scanner_for_b)==']') balance--;\\\\n				scanner_for_b++;\\\\n			\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n			while (balance!=0);\\\\n			a=to+2;\\\\n			b=scanner_for_b-1;\\\\n\\\\n			// Render level\\\\n			under=splurgh(save_to\\\",\\n	',',\\n	\\\"key_name\\\",\\n	',',\\n	\\\"url_stub\\\",\\n	',',\\n	\\\"a\\\",\\n	',',\\n	\\\"b\\\",\\n	',',\\n	\\\"level+1\\\",\\n	',',\\n	\\\"data\\\",\\n	',',\\n	\\\"chain+'~'+anchor_reference\\\",\\n	',',\\n	\\\"true);\\\\n			if (under!='')\\\\n			{\\\\n				contents+='<a class=\\\\\\\\\\\\\\\"toggleable_tray_button\\\\\\\\\\\\\\\" href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\" onclick=\\\\\\\\\\\\\\\"return toggleable_tray(this.parentNode);\\\\\\\\\\\\\\\"><img title=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" alt=\\\\\\\\\\\\\\\"\\\",\\n	ecv(\\\$cl,array(8,3),2,\\\"EXPAND\\\",array()),\\n	\\\"/\\\",\\n	ecv(\\\$cl,array(8,3),2,\\\"CONTRACT\\\",array()),\\n	\\\"\\\\\\\\\\\\\\\" src=\\\\\\\\\\\\\\\"'+\\\\\\\"\\\",\\n	ecv(\\\$cl,array(1,3),0,\\\"IMG\\\",array(\\\"contract\\\",\\\"0\\\",\\\"default\\\")),\\n	\\\"\\\\\\\".replace(/^https?:/\\\",\\n	',',\\n	\\\"window.location.protocol)+'\\\\\\\\\\\\\\\" /></a>\\\\\\\\n';\\\\n				contents+='<ul class=\\\\\\\\\\\\\\\"toggleable_tray\\\\\\\\\\\\\\\">\\\\\\\\n';\\\\n				contents+=under;\\\\n				contents+='</ul>\\\\\\\\n';\\\\n			\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n\\\\n			// This will restore the positions back so as to the next one on our own level\\\\n			a=b+2;\\\\n			b=range_b;\\\\n		\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n		contents+='</li>';\\\\n		contents+=splurgh(save_to\\\",\\n	',',\\n	\\\"key_name\\\",\\n	',',\\n	\\\"url_stub\\\",\\n	',',\\n	\\\"a\\\",\\n	',',\\n	\\\"b\\\",\\n	',',\\n	\\\"level\\\",\\n	',',\\n	\\\"data\\\",\\n	',',\\n	\\\"chain\\\",\\n	',',\\n	\\\"true); // Next iteration in list\\\",\\n	',',\\n	\\\" handled by recursion\\\\n	\\\",\\n	\\\"}\\\",\\n	\\\" else\\\\n	{\\\\n		contents+='</li>';\\\\n	\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n\\\\n	if (!not_first)\\\\n	{\\\\n		var splurgh_element=document.getElementById(save_to);\\\\n		set_inner_html(splurgh_element\\\",\\n	',',\\n	\\\"'<ul>'+contents+'</ul>\\\\\\\\n');\\\\n//		set_inner_html(splurgh_element\\\",\\n	',',\\n	\\\"escape_html(get_inner_html(splurgh_element)).replace(/\\\\\\\\n/g\\\",\\n	',',\\n	\\\"'<br />'));\\\\n	\\\",\\n	\\\"}\\\",\\n	\\\" else return contents;\\\\n\\\",\\n	\\\"}\\\",\\n	\\\"\\\\n\\\\n\\\";\";\n\";}");

?>